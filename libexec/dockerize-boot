#!/usr/bin/env bash
#
# Summary: Run container from image or git repository

# Help: NAME
#         dockerize-boot - Run container from image or git

# SYNOPISIS
#         dockerize boot [--] <image> [<tag>]
#         dockerize boot [options] [--] <repository>

# DESCRIPTION
#         In the first form runs up a new container from the
#         specified image and tag. If no tag is given then
#         the latest is assumed.
#
#         In the second form if performs a `dockerize git`
#         using the given options then runs up a new container
#         from the most recent version of the code available
#         for the chosen branch.  If no branch is given 'master'
#         is assumed.
#
#         The second form is assumed if the first non-option
#         contains a ':'.  This means that <image> cannot contain
#         a colon, and <repository> must contain one (so you must
#         use the file:///path/to/repository syntax to refer to
#         local repositories).

# OPTIONS
#         -b <name>, --branch <name>
#             Specify the branch to build. If no branch is given
#             'master' is assumed. Ignored if not using the git
#             version of the command.
#
#         -h, --help
#             Show this help information.
#
#         -k, --insecure
#             Don't verify SSL certificates when performing remote
#             remote git operations (sets the GIT_SSL_NO_VERIFY
#             environment variable when running commands). Ignored
#             if not using the git version of the command.

set -e

APP_NAME="boot"

original_args="$@"

non_options=
git_repo_branch="master"

until [ -z "$1" ]; do
  case $1 in
    --branch|-b )
      shift
      git_repo_branch=$1
      ;;
    --help|-h )
      dockerize help "$APP_NAME"
      exit 0
      ;;
    --insecure|-k )
      ;;
    -- )
      shift
      non_options="$non_options $@"
      break
      ;;
    -* )
      echo    "error: unknown option: $1" 1>&2
      echo    "usage: dockerize $APP_NAME [--] <image> [<tag>]" 1>&2
      echo -e "   or: dockerize $APP_NAME [options] [--] <repository>\n" 1>&2
      echo    "    -b, --branch           build from branch" 1>&2
      echo    "    -h, --help             show detailed help" 1>&2
      echo -e "    -k, --insecure         don't check SSL certificates\n" 1>&2
      exit 1
      ;;
    * )
      non_options="$non_options $1"
  esac

  shift

  if [ "$#" = "0" ]; then
    break
  fi
done

set -- ${non_options}

if [ -z "$1" ]; then
  echo "error: you must specify an image name or git repository" 1>&2
  exit 1
fi

docker_image="${1}"
docker_image_tag="${2:-latest}"

if [[ "$docker_image" =~ ":" ]]; then
  $__exec "dockerize git $original_args"

  git_repo_uri="${docker_image}"
  git_repo_basename=$(basename "$git_repo_uri")
  docker_image="${git_repo_basename%.*}"
  docker_image_tag="${git_repo_branch}"
  cloned_repository="$DOCKER_GIT_REPOS/$docker_image"

  $__exec "cd $cloned_repository"
  commit_sha="$($__exec git rev-parse --short HEAD)"
  docker_image_tag="${docker_image_tag}.${commit_sha}"

  # For git branches, we don't want more than 1 container per commit
  if [[ -n $(dockerize ps | grep $docker_image | grep $docker_image_tag) ]]; then
    echo "Container $docker_image:$docker_image_tag already running"
    exit 0
  fi
fi

cidfile="$DOCKER_CIDS_DIR/${docker_image}.${docker_image_tag}.cid"
if [[ -e $cidfile && -s $cidfile && -n $(dockerize ps | grep $(cat $cidfile)) ]]; then
  echo "Container ${docker_image}.${docker_image_tag} already running"
else
  $__exec "rm -f $cidfile"
  $__exec "dockerize run -cidfile $cidfile $envs -d $docker_image:$docker_image_tag"
fi
