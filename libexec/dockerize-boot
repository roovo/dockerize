#!/usr/bin/env bash
#
# Usage: dockerize boot image[:tag]
#
# Summary: Runs Docker container from image, builds master image if necessary
#
# Help: Run containers from a pre-built Docker image, build one on-the-fly
#
#   dockerize boot hi_sinatra:v2
#   dockerize boot cambridge-healthcare/hi_sinatra-docker hi_sinatra
#
# A directory with the image name must exist in $DOCKER_GITLAB_REPOS.

set -e

if [ -z "$1" ]
then
  echo "Must specify an image name or gitlab user/repository"
  exit 1
fi

args="$@"

docker_image_and_tag=(${1/:/ })
shift
docker_image="${docker_image_and_tag[0]}"
docker_image_tag="${docker_image_and_tag[1]:-latest}"

# If docker_image includes a / then we assume that we're dealing with a gitlab repository
if [[ $docker_image =~ "/" ]]
then
  # Clone and build if necessary
  $__exec "dockerize gitlab $args"

  gitlab_user_and_repo=(${docker_image/\// })
  docker_image="${1:-${gitlab_user_and_repo[1]}}"
  docker_image_tag="${docker_image_and_tag[1]:-master}"
  cloned_repository="$DOCKER_GITLAB_REPOS/$docker_image"
  $__exec "cd $cloned_repository"
  commit_sha="$($__exec git rev-parse --short HEAD)"
  docker_image_tag="${docker_image_tag}.${commit_sha}"

  # For git branches, we don't want more than 1 container per commit
  if [[ -n $(dockerize ps | grep $docker_image | grep $docker_image_tag) ]]
  then
    echo "Container $docker_image:$docker_image_tag already running"
    exit 0
  fi
fi

if [[ -e .dockerize.envs ]]
then
  # Extract ENVs from .dockerize.envs
  envs="$(dockerize envs $(cat .dockerize.envs | tr "\n" " "))"
fi

if [[ -e .dockerize.containers ]]
then
  containers="$(cat .dockerize.containers || '')"

  for _container in ${containers[@]}
  do
    _container_image_tag_and_port=(${_container//:/ })
    _container_image="${_container_image_tag_and_port[0]}"
    _container_image_tag="${_container_image_tag_and_port[1]:-latest}"
    _container_image_port="${_container_image_tag_and_port[2]}"
    # Always strip the SHA, we only want 1 container dependency per branch
    _container_cidfile="$DOCKER_CIDS_DIR/${docker_image}.${docker_image_tag/\.*/}.${_container_image/\//.}.cid"

    __command="dockerize run -cidfile $_container_cidfile $envs -d"
    [[ -n $_container_image_port ]] && __command="$__command -p $_container_image_port"
    __command="$__command $_container_image:$_container_image_tag"

    if [[ -e $_container_cidfile && -n $(dockerize ps | grep $(cat $_container_cidfile)) ]]
    then
      echo "Container ${docker_image}.${docker_image_tag}.${_container_image/\//.} already running"
    else
      $__exec "rm -f $_container_cidfile"
      $__exec $__command
    fi

    _container_image_upcase=$(echo ${_container_image/*\//} | tr '[a-z]' '[A-Z]')
    # expose hostnames for all dependent containers as envs
    envs="$envs -e ${_container_image_upcase}_HOST=$(dockerize show $_container_cidfile IPAddress)"
  done
fi

cidfile="$DOCKER_CIDS_DIR/${docker_image}.${docker_image_tag}.cid"
if [[ -e $cidfile && -n $(dockerize ps | grep $(cat $cidfile)) ]]
then
  echo "Container ${docker_image}.${docker_image_tag} already running"
else
  $__exec "rm -f $cidfile"
  $__exec "dockerize run -cidfile $cidfile $envs -d $docker_image:$docker_image_tag"
fi
