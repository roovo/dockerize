#!/usr/bin/env bash
#
# Summary: Run container's tests from image or git repository

# Help: NAME
#         dockerize-test - Run container tests from image or git

# SYNOPISIS
#         dockerize test [--] <image> [<tag>]
#         dockerize test [options] [--] <repository>

# DESCRIPTION
#         This sub-command expects the containter to run its
#         tests when run with the command --run-tests, e.g.
#
#         `docker run image:tag --run-tests`
#
#         It expects this comand to return and the sub-command
#         will return the containers exit code.
#
#         See the documentation for dockerize-boot for more
#         information on how the two forms of the command run.

# OPTIONS
#         -b <name>, --branch <name>
#             Specify the branch to build. If no branch is given
#             'master' is assumed. Ignored if not using the git
#             version of the command.
#
#         -h, --help
#             Show this help information.

set -e

APP_NAME="test"

original_args="$@"

non_options=
git_repo_branch="master"

until [ -z "$1" ]; do
  case $1 in
    --branch|-b )
      shift
      git_repo_branch=$1
      ;;
    --help|-h )
      dockerize help "$APP_NAME"
      exit 0
      ;;
    -- )
      shift
      non_options="$non_options $@"
      break
      ;;
    -* )
      echo    "error: unknown option: $1" 1>&2
      echo    "usage: dockerize $APP_NAME [--] <image> [<tag>]" 1>&2
      echo -e "   or: dockerize $APP_NAME [options] [--] <repository>\n" 1>&2
      echo    "    -b, --branch           build from branch" 1>&2
      echo -e "    -h, --help             show detailed help\n" 1>&2
      exit 1
      ;;
    * )
      non_options="$non_options $1"
  esac

  shift

  if [ "$#" = "0" ]; then
    break
  fi
done

set -- ${non_options}

if [ -z "$1" ]; then
  echo "error: you must specify an image name or git repository" 1>&2
  exit 1
fi

docker_image="${1}"
docker_image_tag="${2:-latest}"

if [[ "$docker_image" =~ ":" ]]; then
  $__exec "dockerize git $original_args"

  git_repo_uri="${docker_image}"
  git_repo_basename=$(basename "$git_repo_uri")
  docker_image="${git_repo_basename%.*}"
  docker_image_tag="${git_repo_branch}"
  cloned_repository="$DOCKER_GIT_REPOS/$docker_image"

  $__exec "cd $cloned_repository"
  commit_sha="$($__exec git rev-parse --short HEAD)"
  docker_image_tag="${docker_image_tag}.${commit_sha}"

  # For git branches, we don't want more than 1 container per commit
  if [[ -n $(dockerize ps | grep $docker_image | grep $docker_image_tag) ]]; then
    echo "Container $docker_image:$docker_image_tag already running"
    exit 0
  fi
fi

cidfile="$DOCKER_CIDS_DIR/${docker_image}.${docker_image_tag}.cid"
if [[ -e $cidfile && -s $cidfile && -n $(dockerize ps | grep $(cat $cidfile)) ]]; then
  echo "Container ${docker_image}.${docker_image_tag} already running"
else
  $__exec "rm -f $cidfile"
  $__exec "dockerize run -cidfile $cidfile $envs $docker_image:$docker_image_tag --run-tests"
fi
