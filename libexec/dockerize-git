#!/usr/bin/env bash
#
# Summary: Build images from git repositories
# Usage: dockerize git <repository>[:branch] [<directory>]

# Help: NAME
#         dockerize-git - Build a docker image from a git repository

# SYNOPISIS
#         dockerize git <repository>[:branch] [<directory>]

# DESCRIPTION
#         Clones or fetches changes from a git repository, then
#         builds and tags a docker image from it.

#         The repository must be specified using a valid git URL,
#         e.g:
#
#         o   dockerize git https://github.com/example/test.git
#
#         o   dockerize git git@gitlab.example.com:owner/test.git
#
#         o   dockerize git /path/to/repository/test

#         A local copy of the repository is cloned into the
#         directory:
#
#             $HOME/.docker/git_repositories/<directory>
#
#         If the directory has not been specified it is set to
#         the name of the repository in the URL ('test' in the
#         examples above).
#
#         Whenever the command is run this local copy is updated
#         with the latest changes and the requested branch is
#         checked out.

#         If this is the first time this repository has been
#         dockerized a master image is first created with the
#         tag 'master'. This master tag is not related in any
#         way to the master git branch, it is simply the master
#         docker image from which all other docker images for
#         this repository are built.
#
#             > docker images
#             REPOSITORY          TAG         ....
#             test                master      ....
#
#         This is done to help speed up the build process when
#         creating images.

#         The project's Dockerfile is updated so that the FROM
#         directive points to the repository master image, and
#         then a new image is built using it.  The resultant
#         image is tagged with the git branch name and short
#         version of the commit's SHA, e.g:
#
#             > docker images
#             REPOSITORY          TAG                       ....
#             test                feature-branch.093e707    ....

if [ -z "$(type -p git)" ]
then
  echo "Cannot find git. Is git installed and available in the PATH?"
  exit 1
fi

if [ -z "$1" ]
then
  echo "Must specify a git repsoitory URL"
  exit 1
fi

git_repo_uri="${1}"
git_repo_basename=$(basename "$git_repo_uri")
git_repo_name_and_branch=(${git_repo_basename/:/ })
git_repo_name="${git_repo_name_and_branch[0]}"
git_repo="${git_repo_name%.*}"
git_repo_branch="${git_repo_name_and_branch[1]:-master}"

shift

docker_image="${1:-${git_repo/*\//}}"
cloned_repository="$DOCKER_GIT_REPOS/$docker_image"

if [ ! -e "$cloned_repository" ]
then
  $__exec "env GIT_SSL_NO_VERIFY=true git clone ${git_repo_uri} $cloned_repository"
  $__exec "cd $cloned_repository"
else
  $__exec "cd $cloned_repository && env GIT_SSL_NO_VERIFY=true git fetch"
fi

$__exec "env GIT_SSL_NO_VERIFY=true git checkout -f origin/$git_repo_branch"
if [ $? -ne 0 ]
then
  echo "Branch origin/$git_repo_branch does not exist"
  exit 1
fi

commit_sha="$($__exec git rev-parse --short HEAD)"
docker_image_tag="${git_repo_branch}.${commit_sha}"

if [[ $PWD == $cloned_repository && ! -e Dockerfile ]]
then
  echo "This repository does not contain a Dockerfile, cannot build Docker image"
  exit 1
fi

if [[ -z $(dockerize images | grep $docker_image | grep " master ") ]]
then
  $__exec "docker build -no-cache -rm -t $docker_image:master ."
fi

if [[ -n $(dockerize images | grep $docker_image | grep $docker_image_tag) ]]
then
  echo "Container $docker_image:$docker_image_tag already built"
else
  $__exec "sed 's|FROM .*|FROM $docker_image:master|g' Dockerfile > Dockerfile.new"
  $__exec "mv Dockerfile Dockerfile.bak && mv Dockerfile.new Dockerfile"
  $__exec "docker build -no-cache -rm -t $docker_image:$docker_image_tag ."
fi
