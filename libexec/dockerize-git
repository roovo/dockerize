#!/usr/bin/env bash
#
# Summary: Build images from git repositories

# Help: NAME
#         dockerize-git - Build a docker image from a git repository
#
# SYNOPISIS
#         dockerize git [options] [--] <repository>

# DESCRIPTION
#         Clones or fetches changes from a git repository, then
#         builds and tags a docker image from it.
#
#         The repository must be specified using a valid git URL,
#         e.g:
#
#         o   dockerize git https://github.com/example/test.git
#
#         o   dockerize git git@gitlab.example.com:owner/test.git
#
#         o   dockerize git file:///path/to/repository/test

#         A local copy of the repository is cloned into the
#         directory:
#
#             $HOME/.docker/git_repositories/<repository name>
#
#         The <repositoy name> is the name of the repository in
#         the git URL ('test' in the examples above).
#
#         Whenever the command is run this local copy is updated
#         with the latest changes and the requested branch is
#         checked out.

#         If this is the first time this repository has been
#         dockerized a base image is created (tagged base) from
#         which all subsequent images are built.
#
#             > docker images
#             REPOSITORY          TAG         ....
#             test                base        ....
#
#         This is done to help speed up the building of subsequent
#         images.

#         The normal build process adjusts the project Dockerfile
#         so that it is built from the base image.  A new image is
#         created tagged with the git branch name and the commit's
#         (short version of the) SHA, e.g:
#
#             > docker images
#             REPOSITORY          TAG                     ....
#             test                base                    ....
#             test                some-branch.093e707     ....

# OPTIONS
#         -b <name>, --branch <name>
#             Specify the branch to build. If no branch is given
#             master is assumed.
#
#         -h, --help
#             Show this help information.

set -e

APP_NAME="git"

if [[ -z $(type -p git) ]]
then
  echo "Cannot find git. Is git installed and available in the PATH?\n" 1>&2
  exit 1
fi

non_options=
git_repo_branch="master"

until [[ -z $1 ]]; do
  case $1 in
    --help|-h )
      dockerize help "$APP_NAME"
      exit 0
      ;;
    --branch|-b )
      shift
      git_repo_branch=$1
      ;;
    -- )
      shift
      non_options="$non_options $@"
      break
      ;;
    -* )
      echo    "error: unknown option: $1" 1>&2
      echo -e "usage: dockerize $APP_NAME [options] [--] <repository>\n" 1>&2
      echo    "    -b, --branch           build from branch" 1>&2
      echo -e "    -h, --help             show detailed help\n" 1>&2
      exit 1
      ;;
    * )
      non_options="$non_options $1"
  esac

  shift

  if [[ $# == "0" ]]; then
    break
  fi
done

set -- $non_options

git_repo_uri="${1}"
git_repo_basename=$(basename "$git_repo_uri")
docker_image="${git_repo_basename%.*}"
cloned_repository="$DOCKER_GIT_REPOS/$docker_image"

if [[ ! -e $cloned_repository ]]
then
  $__exec "git clone ${git_repo_uri} $cloned_repository"
  $__exec "cd $cloned_repository"
else
  $__exec "cd $cloned_repository && git fetch"
fi

$__exec "git checkout -f origin/$git_repo_branch"
if [[ $? != 0 ]]
then
  echo -e "error: branch $git_repo_branch does not exist\n" 1>&2
  exit 1
fi

commit_sha="$($__exec git rev-parse --short HEAD)"
docker_image_tag="${git_repo_branch}.${commit_sha}"

if [[ $PWD == $cloned_repository && ! -e Dockerfile ]]
then
  echo "error: this repository does not contain a Dockerfile, cannot build Docker image/n" 1>&2
  exit 1
fi

if [[ -z $(dockerize images | grep $docker_image | grep " base ") ]]
then
  $__exec "docker build -no-cache -rm -t $docker_image:base ."
fi

if [[ -n $(dockerize images | grep $docker_image | grep $docker_image_tag) ]]
then
  echo "Container $docker_image:$docker_image_tag already built"
else
  $__exec "sed 's|FROM .*|FROM $docker_image:base|g' Dockerfile > Dockerfile.new"
  $__exec "mv Dockerfile Dockerfile.bak && mv Dockerfile.new Dockerfile"
  $__exec "docker build -no-cache -rm -t $docker_image:$docker_image_tag ."
fi
