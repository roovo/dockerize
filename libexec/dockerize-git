#!/usr/bin/env bash
#
# Usage: dockerize git user/repository[:branch] [docker_image]
#
# Summary: Build images from git repositories
#
# Help: A Docker image will be built from repositories that contain a Dockerfile
#
#   dockerize git rupert/sinatra_docker_test sinatra_docker_test
#
# Dockerize adds a few conventions on top of Docker's default build command:
#
# * git credentials management (caches or stores)
# * always clones the git repository
# * always builds from the local directory (think ADD . /app_name)
# * enables you to leverage the ADD command to its full potential

# git_uri="gitlab.nat.bt.com"
git_uri="github.com"

if [ -z "$(type -p git)" ]
then
  echo "Cannot find git. Is git installed and available in the PATH?"
  exit 1
fi

git_version="$(git --version | awk '{ print $3 }')"
git_version_num="${git_version//./}"

if [ "$git_version_num" -lt 1790 ]
then
  echo "git v1.7.9.0 or newer required"
  exit 1
fi

# Setting up git credentials caching
# There are 2 requirements for this:
#   1. git >= 1.7.9
#   2. git pull via https
#
# More info:
#   * https://www.kernel.org/pub/software/scm/git/docs/git-credential-store.html
#   * https://help.github.com/articles/set-up-git
#
if [[ ! -e "$HOME/.git-credentials" && ! -e "$HOME/.no_prompting_for_git_credentials" ]]
then
  echo "Should git manage git credentials?"
  git_credentials_options=(
    "No, don't manage credentials"
    "Cache credentials for 10 minutes"
    "Store credentials in plaintext"
  )
  select answer in "${git_credentials_options[@]}"
  do
    touch "$HOME/.no_prompting_for_git_credentials"

    case $answer in
    "${git_credentials_options[0]}" )
      break
      ;;
    "${git_credentials_options[1]}" )
      git config --global credential.helper cache
      break
      ;;
    "${git_credentials_options[2]}" )
      git config --global credential.helper store
      echo "Storing git credentials in plaintext"
      read -p "Git username: " git_username
      read -p "Git password: " git_password
      echo "https://$git_username:$git_password@${git_uri}" > $HOME/.git-credentials
      break
      ;;
    esac
  done
fi

if [ -z "$1" ]
then
  echo "Must specify a git user/repository"
  exit 1
fi

git_repo_name_and_branch=(${1/:/ })
git_repo="${git_repo_name_and_branch[0]}"
git_repo_branch="${git_repo_name_and_branch[1]:-master}"
shift

docker_image="${1:-${git_repo/*\//}}"
cloned_repository="$DOCKER_GIT_REPOS/$docker_image"

if [ ! -e "$cloned_repository" ]
then
  $__exec "env GIT_SSL_NO_VERIFY=true git clone https://${git_uri}/${git_repo}.git $cloned_repository"
  $__exec "cd $cloned_repository"
else
  $__exec "cd $cloned_repository && env GIT_SSL_NO_VERIFY=true git fetch"
fi

$__exec "env GIT_SSL_NO_VERIFY=true git checkout -f origin/$git_repo_branch"
if [ $? -ne 0 ]
then
  echo "Branch origin/$git_repo_branch does not exist"
  exit 1
fi

commit_sha="$($__exec git rev-parse --short HEAD)"
docker_image_tag="${git_repo_branch}.${commit_sha}"

if [[ $PWD == $cloned_repository && ! -e Dockerfile ]]
then
  echo "This repository does not contain a Dockerfile, cannot build Docker image"
  exit 1
fi

if [[ -z $(dockerize images | grep $docker_image | grep " master ") ]]
then
  $__exec "docker build -no-cache -rm -t $docker_image:master ."
fi

if [[ -n $(dockerize images | grep $docker_image | grep $docker_image_tag) ]]
then
  echo "Container $docker_image:$docker_image_tag already built"
else
  $__exec "sed 's|FROM .*|FROM $docker_image:master|g' Dockerfile > Dockerfile.new"
  $__exec "mv Dockerfile Dockerfile.bak && mv Dockerfile.new Dockerfile"
  $__exec "docker build -no-cache -rm -t $docker_image:$docker_image_tag ."
fi
